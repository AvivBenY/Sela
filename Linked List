namespace Linked_List1 
{
    class Linked_List<T>
    {        
    
       Node start;
       Node end;


       public void AddFirst(T val) //O(1)
       {
           Node n = new Node(val);
           n.next = start;
           start = n;
           if (end == null) end = n;
       }

       public bool RemoveFirst(out T saveFirstValue) //O(1)
       {
           saveFirstValue = default(T);
           if (start == null) return false;

           saveFirstValue = start.data;
           start = start.next;
           if (start == null) end = null; //for removing single (last) item

           return true;
       }

       public void AddLast(T val) //O(1) !!!!!
       {
           if (start == null)
           {
               AddFirst(val);
               return;
           }
           Node n = new Node(val);
           end.next = n;
           end = n;
       }

        public bool GetAt(int index, out T data)
        {
            Node temp = start;
            int i = 0;
            data = default(T);
            while (temp != null && i < index)
            {
                i++;
                temp = temp.next;
            }
            if (temp == null) return false;
            data = temp.data;
            return true;
        }
  
        public void AddLast_badVersion(T val) //O(n)
        {
           if (start == null)
           {
               AddFirst(val);
               return;
           }

           Node tmp = start;

           while (tmp.next != null) //stop at the last node
           {
               tmp = tmp.next;
           }
           Node n = new Node(val);
           tmp.next = n;
        }

       public override string ToString() //O(n)
       {
           StringBuilder sb = new StringBuilder();
           Node tmp = start;

           while (tmp != null)
           {
               sb.AppendLine(tmp.data.ToString());
               tmp = tmp.next;
           }

           return sb.ToString();
       }

       class Node
       {
           public T data;
           public Node next;

           public Node(T data)
           {
               this.data = data;
               next = null;
           }
       }    
    }
